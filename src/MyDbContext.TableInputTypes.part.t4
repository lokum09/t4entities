<#@ template language="c#" hostspecific="true" debug="false" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Configuration" #>
<#@ assembly name="System.Data" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Reflection" #>
<#@ include file=".\common.t4" #>
// ------------------------------------------------------------------------------------------------
// <auto-generated>
//  This code was generated by a C# code generator.
//  Warning: Do not make changes directly to this file; they will get overwritten on the next code generation.
// </auto-generated>
// ------------------------------------------------------------------------------------------------
using System;
using System.Data;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Data.SqlClient;
using Microsoft.Data.SqlClient.Server;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;

namespace <#= Namespace #>;

public partial class <#= ClassName #> : DbContext
{
    public static class <#= TableInputTypes #>
    {
<#= CreateSchemaClasses() #>
    }
}
<#+
    private string CreateSchemaClasses()
    {
        return GetDbTableTypes()
            .GroupBy(x => x.TypeSchema)
            .Aggregate(
                string.Empty,
                (content, next) => next
                .GroupBy(x => x.TypeName)
                .Aggregate(
                    string.Empty,
                    (content2, next2) => {
                        var arguments = next2
                            .Aggregate(
                                string.Empty,
                                (content3, next3) => {
                                    Type dotNetType = next3.DotNetType;
                                    var dotnetTypeName = string.Concat(
                                        dotNetType.Name,
                                        next3.IsNullable && IsPrimitiveType(dotNetType) ? "?" : string.Empty
                                    );
                                    return next2.Count() == 1
                                        ? dotnetTypeName
                                        : $"{(content3.Length == 0 ? string.Empty : $"{content3}, ")}{dotnetTypeName} {next3.ColumnName}";
                                },
                                result => next2.Count() == 1 ? result : $"({result})"
                            );

                        var declarations = next2
                            .Aggregate(
                                string.Empty,
                                (content3, next3) => {
                                    Type dotNetType = next3.DotNetType;
                                    var maxLengthAsString = dotNetType == typeof(string) ? $", {next3.MaxLength}" : string.Empty;
                                    var sqlTypeEnum = $"SqlDbType.{FixSqlType(next3.ColumnType)}";
                                    return $"{content3}\n{Tab(6)}new SqlMetaData(\"{next3.ColumnName}\", {sqlTypeEnum}{maxLengthAsString}),";
                                }
                            );

                        var substitutions = next2
                            .Select((value, index) => new { value, index })
                            .Aggregate(
                                string.Empty,
                                (content3, next3) => {
                                    Type dotNetType = next3.value.DotNetType;
                                    var columnName = next2.Count() == 1 ? string.Empty : $".{next3.value.ColumnName}";
                                    bool isNull = next3.value.IsNullable; // || IsObjectType(dotNetType);

                                    var sb = new StringBuilder(content3);
                                    if (isNull)
                                    {
                                        sb.Append($"\n{Tab(6)}if (item{columnName} == null) {{ ");
                                        sb.Append($"tableRow.SetDBNull({next3.index});");
                                        sb.Append(" } else { ");
                                    }
                                    else 
                                    {
                                        sb.Append("\n");
                                    }
                                    var nullableAsString = isNull && IsObjectType(dotNetType) == false ? ".Value" : string.Empty;

                                    sb.Append($"{Tab(isNull ? 0 : 6)}tableRow.Set{dotNetType.Name}({next3.index}, item{columnName}{nullableAsString});");
                                    sb.Append(isNull ? " }" : string.Empty);
                                    return sb.ToString();
                                }
                            );

                        var sb = new StringBuilder(content2);
                        sb.Append($"{Tab(3)}public class {next2.Key} : List<{arguments}>\n{Tab(3)}{{\n");
                        sb.Append($"{Tab(4)}public List<SqlDataRecord> ToRecords()\n");
                        sb.Append($"{Tab(4)}{{\n");
                        sb.Append($"{Tab(5)}var tableSchema = new SqlMetaData[] {{ {declarations}\n{Tab(5)}}};\n");
                        sb.Append($"{Tab(5)}var table = new List<SqlDataRecord>();\n");
                        sb.Append($"{Tab(5)}foreach (var item in this)\n{Tab(5)}{{\n");
                        sb.Append($"{Tab(6)}var tableRow = new SqlDataRecord(tableSchema);{substitutions}\n{Tab(6)}table.Add(tableRow);\n");
                        sb.Append($"{Tab(5)}}}\n{Tab(5)}return table;\n{Tab(4)}}}\n");
                        sb.Append($"{Tab(3)}}}\n\n");
                        return sb.ToString();
                    },
                    result => $"{content}{Tab(2)}public static class {next.Key}\n{Tab(2)}{{\n{result}\n{Tab(2)}}}\n\n"
                )
            );
    }

    private List<DbTableType> GetDbTableTypes()
    {
        if (dbTableTypes.Count == 0)
        {
            using (var conn = new SqlConnection(ConnectionString))
            {
                conn.Open();

                using (var cmd = conn.CreateCommand())
                {
                    cmd.CommandText = @$"
                        SELECT
                            s.[name] AS type_schema,
                            tt.[name] AS type_name,
                            c.[name] AS column_name,
                            t.[name] AS column_type,
                            CONVERT(int, ISNULL(t.max_length, 0)) / 2 AS max_length,
                            c.is_nullable
                        FROM sys.table_types AS tt
                        INNER JOIN sys.columns AS c ON c.[object_id] = tt.type_table_object_id
						INNER JOIN sys.types AS t ON t.user_type_id = c.user_type_id
                        INNER JOIN sys.schemas AS s ON tt.[schema_id] = s.[schema_id]
                        WHERE tt.is_user_defined = 1 AND tt.is_table_type = 1
                            AND NOT EXISTS (
								SELECT 1 
								FROM sys.table_types AS tt2 
								INNER JOIN sys.columns AS c2 ON c2.[object_id] = tt2.type_table_object_id
								INNER JOIN sys.types AS t2 ON t2.user_type_id = c2.user_type_id
								WHERE tt2.is_user_defined = 1 AND tt2.is_table_type = 1
                                    AND tt2.type_table_object_id = tt.type_table_object_id AND t2.[name] IN ({ExcludedSqlTypesAsString})
							)
                    ";
            
                    SqlDataReader reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        var columnType = reader["column_type"].ToString();
                        dbTableTypes.Add(new DbTableType {
                            TypeSchema = reader["type_schema"].ToString(),
                            TypeName   = reader["type_name"].ToString(),
                            ColumnName = reader["column_name"].ToString(),
                            ColumnType = columnType,
                            MaxLength  = (int) reader["max_length"],
                            DotNetType = ConvertSqlToDotNetType(columnType),
                            IsNullable = (bool) reader["is_nullable"]
                        });
                    }
                    reader.Close();
                }
            }
        }

        return dbTableTypes;
    }
#>