<#@ template language="c#" hostspecific="true" debug="false" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Configuration" #>
<#@ assembly name="System.Data" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Reflection" #>
<#@ include file=".\common.t4" #>
// ------------------------------------------------------------------------------------------------
// <auto-generated>
//  This code was generated by a C# code generator.
//  Warning: Do not make changes directly to this file; they will get overwritten on the next code generation.
// </auto-generated>
// ------------------------------------------------------------------------------------------------
using System;
using System.Data;
using System.Linq;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;

namespace <#= Namespace #>;

public partial class <#= ClassName #> : DbContext
{
    public class <#= ScalarFunctions #>SchemaContainer {
<#= GenerateSchemaContainerBody() #>
	}

    public <#= ScalarFunctions #>SchemaContainer <#= ScalarFunctions #> { private set; get; }

    private void On<#= ScalarFunctions #>CreatingPartial(ModelBuilder modelBuilder)
    {
        <#= ScalarFunctions #> = new <#= ScalarFunctions #>SchemaContainer()
        {
<#= GenerateSchemaContainerInitializaion() #>
        };

<#= CreateDeclarationsForModelBuilder() #>
    }

<#= CreateMethodsForDbObjects() #>
}

public static class <#= ClassName + ScalarFunctions #>
{
<#= CreateMethodsForStandardTypes() #>
}

<#+
    private string GenerateSchemaContainerBody()
    {
        return GetDbScalarObjects()
            .GroupBy(x => x.FunctionSchema)
            .Aggregate(
                string.Empty,
                (content, next) => $"{Content(content)}{Tab(2)}public {PascalCase(next.Key)}{ScalarFunctions} {next.Key} {{ get; init; }}"
            );
    }

    private string GenerateSchemaContainerInitializaion()
    {
        return GetDbScalarObjects()
            .GroupBy(x => x.FunctionSchema)
            .Aggregate(
                string.Empty,
                (content, next) => $"{Content(content)}{Tab(3)}{next.Key} = new {PascalCase(next.Key)}{ScalarFunctions} {{ Database = Database }},"
            );
    }

    private string CreateDeclarationsForModelBuilder()
    {
        return GetDbScalarObjects()
            //.Where(x => x.Arguments.Any(y => y.HasUserType) == false)
            .GroupBy(x => x.FunctionSchema)
            .Aggregate(
                string.Empty,
                (content, next) => next
                    .Aggregate(
                        string.Empty,
                        (content2, next2) => {    
                            var dotnetArgs = new StringBuilder();
                            foreach(var arg in next2.Arguments)
                            {
                                dotnetArgs.Append($"{(dotnetArgs.Length > 0 ? ", " : string.Empty)}typeof({arg.DotNetType})");
                            }

                            return $"{Content(content2)}{Tab(2)}modelBuilder.HasDbFunction(typeof({ClassName}{ScalarFunctions}.{next2.FunctionSchema}).GetMethod(nameof({ClassName}{ScalarFunctions}.{next2.FunctionSchema}.{next2.FunctionName}), new[] {{ {dotnetArgs} }})).HasSchema(\"{next2.FunctionSchema}\");";
                        },
                        result => $"{content}\n{result}"
                    )
            );
    }

    private string CreateMethodsForDbObjects()
    {
        return GetDbScalarObjects()
            .GroupBy(x => x.FunctionSchema)
            .Aggregate(
                string.Empty,
                (content, next) => next
                .Aggregate(
                    string.Empty,
                    (content2, next2) => {
                        var dotNetArgs = new StringBuilder();
                        var sqlArgs = new StringBuilder();
                        var parametersSection = CreateSqlParametersSection(next2, dotNetArgs, sqlArgs);

                        var sb = new StringBuilder(content2);
                        sb.Append($"\n{Tab(2)}public {next2.FunctionType} {next2.FunctionName}({dotNetArgs})\n{Tab(2)}{{\n");
                        sb.Append(parametersSection);
                        sb.Append($"{Tab(3)}return this.Database.SqlQueryRaw<{next2.FunctionType}>(\"SELECT {next2.FunctionSchema}.{next2.FunctionName}({sqlArgs}) AS [Value]\", parameters).First();\n");
                        sb.Append($"{Tab(2)}}}\n");
                        return sb.ToString();
                    },
                    result => $"{content}{Tab(1)}public class {PascalCase(next.Key)}{ScalarFunctions}\n{Tab(1)}{{\n{Tab(2)}public DatabaseFacade Database {{ get; init; }}\n{result}{Tab(1)}}}\n\n"
                )
            );
    }

    private string CreateMethodsForStandardTypes()
    {
        return GetDbScalarObjects()
            //.Where(x => x.Arguments.Any(y => y.HasUserType) == false)
            .GroupBy(x => x.FunctionSchema)
            .Aggregate(
                string.Empty,
                (content, next) => next
                .Aggregate(
                    string.Empty,
                    (content2, next2) => {
                        var dotnetArgs = new StringBuilder();
                        foreach(var arg in next2.Arguments)
                        {
                            dotnetArgs.Append($"{(dotnetArgs.Length > 0 ? ", " : string.Empty)}{arg.DotNetType} {arg.ArgumentName}");
                        }

                        return $"{Content(content2)}{Tab(2)}public static {next2.FunctionType} {next2.FunctionName}({dotnetArgs}) => throw new NotSupportedException();";
                    },
                    result => $"{content}{Tab(1)}public static class {next.Key}\n{Tab(1)}{{\n{result}\n{Tab(1)}}}\n"
                )
            );
    }
#>