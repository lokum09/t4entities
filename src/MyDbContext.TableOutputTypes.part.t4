<#@ template language="c#" hostspecific="true" debug="false" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Configuration" #>
<#@ assembly name="System.Data" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Reflection" #>
<#@ include file=".\common.t4" #>
// ------------------------------------------------------------------------------------------------
// <auto-generated>
//  This code was generated by a C# code generator.
//  Warning: Do not make changes directly to this file; they will get overwritten on the next code generation.
// </auto-generated>
// ------------------------------------------------------------------------------------------------
using System;
using System.Data;
using System.Linq;
using Microsoft.Data.SqlClient;
using Microsoft.Data.SqlClient.Server;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;

namespace <#= Namespace #>;

public partial class <#= ClassName #> : DbContext
{
    public static class <#= TableOutputTypes #>
    {
<#= CreateSchemaClasses() #>
    }
}
<#+
    private string CreateSchemaClasses()
    {
        return GetDbTableTypes()
            .GroupBy(x => x.TypeSchema)
            .Aggregate(
                string.Empty,
                (content, next) => next
                .GroupBy(x => x.TypeName)
                .Aggregate(
                    string.Empty,
                    (content2, next2) => {
                        var properties = next2
                            .Aggregate(
                                string.Empty,
                                (content3, next3) => {
                                    var dotNetType = next3.DotNetType;
                                    var dotnetTypeName = string.Concat(
                                        next3.DotNetType.Name,
                                        next3.IsNullable && IsPrimitiveType(dotNetType) ? "?" : string.Empty
                                    );
                                    return $"{content3}\n{Tab(4)}public {dotnetTypeName} {next3.ColumnName} {{ get; set; }}";
                                }
                            );

                        var sb = new StringBuilder(content2);
                        sb.Append($"{Tab(3)}public class {next2.Key}_Result\n{Tab(3)}{{");
                        sb.Append(properties);
                        sb.Append($"\n{Tab(3)}}}\n\n");
                        return sb.ToString();
                    },
                    result => $"{content}{Tab(2)}public static class {next.Key}\n{Tab(2)}{{\n{result}{Tab(2)}}}\n\n"
                )
            );
    }

    private List<DbTableType> GetDbTableTypes()
    {
        if (dbTableTypes.Count == 0)
        {
            using (var conn = new SqlConnection(ConnectionString))
            {
                conn.Open();

                using (var cmd = conn.CreateCommand())
                {
                    cmd.CommandText = @$"
                        SELECT 
                            c.TABLE_SCHEMA AS [type_schema],
                            c.TABLE_NAME AS [type_name],
                            c.COLUMN_NAME AS [column_name],
                            c.DATA_TYPE AS [column_type],
                            ISNULL(c.CHARACTER_MAXIMUM_LENGTH, 0) AS [max_length],
                            c.IS_NULLABLE AS [is_nullable]
                        FROM INFORMATION_SCHEMA.ROUTINES r
						INNER JOIN INFORMATION_SCHEMA.ROUTINE_COLUMNS c ON r.ROUTINE_SCHEMA = c.TABLE_SCHEMA AND r.ROUTINE_NAME = c.TABLE_NAME
						WHERE r.ROUTINE_TYPE = 'FUNCTION'
                            AND NOT EXISTS (
                                SELECT 1 
                                FROM INFORMATION_SCHEMA.ROUTINE_COLUMNS 
                                WHERE TABLE_SCHEMA = c.TABLE_SCHEMA AND TABLE_NAME = c.TABLE_NAME AND DATA_TYPE IN ({ExcludedSqlTypesAsString})
                            )
                        ORDER BY c.TABLE_SCHEMA, c.TABLE_NAME, c.ORDINAL_POSITION
                    ";
            
                    SqlDataReader reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        var columnType = reader["column_type"].ToString();
                        dbTableTypes.Add(new DbTableType {
                            TypeSchema = reader["type_schema"].ToString(),
                            TypeName = reader["type_name"].ToString(),
                            ColumnName = reader["column_name"].ToString(),
                            ColumnType = columnType,
                            MaxLength = (int) reader["max_length"],
                            DotNetType = ConvertSqlToDotNetType(columnType),
                            IsNullable = reader["is_nullable"].ToString() == "YES"
                        });
                    }
                    reader.Close();
                }
            }
        }

        return dbTableTypes;
    }
#>