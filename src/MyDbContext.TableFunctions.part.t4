<#@ template language="c#" hostspecific="true" debug="false" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Configuration" #>
<#@ assembly name="System.Data" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Reflection" #>
<#@ include file=".\common.t4" #>
// ------------------------------------------------------------------------------------------------
// <auto-generated>
//  This code was generated by a C# code generator.
//  Warning: Do not make changes directly to this file; they will get overwritten on the next code generation.
// </auto-generated>
// ------------------------------------------------------------------------------------------------
using System;
using System.Data;
using System.Linq;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;

namespace <#= Namespace #>;

public partial class <#= ClassName #> : DbContext
{
    public class <#= TableFunctions #>SchemaContainer {
<#= GenerateSchemaContainerBody() #>
	}

    public <#= TableFunctions #>SchemaContainer <#= TableFunctions #> { private set; get; }

    private void On<#= TableFunctions #>CreatingPartial(ModelBuilder modelBuilder)
    {
        <#= TableFunctions #> = new <#= TableFunctions #>SchemaContainer()
        {
<#= GenerateSchemaContainerInitializaion() #>
        };
    }

<#= CreateMethodsForDbObjects() #>
}

<#+
    private string GenerateSchemaContainerBody()
    {
        return GetDbTableObjects()
            .GroupBy(x => x.FunctionSchema)
            .Aggregate(
                string.Empty,
                (content, next) => $"{Content(content)}{Tab(2)}public {PascalCase(next.Key)}{TableFunctions} {next.Key} {{ get; init; }}"
            );
    }

    private string GenerateSchemaContainerInitializaion()
    {
        return GetDbTableObjects()
            .GroupBy(x => x.FunctionSchema)
            .Aggregate(
                string.Empty,
                (content, next) => $"{Content(content)}{Tab(3)}{next.Key} = new {PascalCase(next.Key)}{TableFunctions} {{ Database = Database }},"
            );
    }

    private string CreateMethodsForDbObjects()
    {
        return GetDbTableObjects()
            .GroupBy(x => x.FunctionSchema)
            .Aggregate(
                string.Empty,
                (content, next) => next
                .Aggregate(
                    string.Empty,
                    (content2, next2) => {
                        var dotNetArgs = new StringBuilder();
                        var sqlArgs = new StringBuilder();
                        var parametersSection = CreateSqlParametersSection(next2, dotNetArgs, sqlArgs);

                        var sb = new StringBuilder(content2);
                        sb.Append($"\n{Tab(2)}public IQueryable<{next2.FunctionType}> {next2.FunctionName}({dotNetArgs})\n{Tab(2)}{{\n");
                        sb.Append(parametersSection);
                        sb.Append($"{Tab(3)}return this.Database.SqlQueryRaw<{next2.FunctionType}>(\"SELECT * FROM {next2.FunctionSchema}.{next2.FunctionName}({sqlArgs})\", parameters);\n");
                        sb.Append($"{Tab(2)}}}\n");
                        return sb.ToString();
                    },
                    result => $"{content}{Tab(1)}public class {PascalCase(next.Key)}{TableFunctions}\n{Tab(1)}{{\n{Tab(2)}public DatabaseFacade Database {{ get; init; }}\n{result}{Tab(1)}}}\n\n"
                )
            );
    }
#>