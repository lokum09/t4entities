// ------------------------------------------------------------------------------------------------
// <auto-generated>
//  This code was generated by a C# code generator.
//  Warning: Do not make changes directly to this file; they will get overwritten on the next code generation.
// </auto-generated>
// ------------------------------------------------------------------------------------------------
using System;
using System.Data;
using System.Linq;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;

namespace MyApp.EfCore;

public partial class MyDbContext : DbContext
{
    public class ScalarFunctionsSchemaContainer {
		public DboScalarFunctions dbo { get; init; }
		public XyzScalarFunctions xyz { get; init; }
	}

    public ScalarFunctionsSchemaContainer ScalarFunctions { private set; get; }

    private void OnScalarFunctionsCreatingPartial(ModelBuilder modelBuilder)
    {
        ScalarFunctions = new ScalarFunctionsSchemaContainer()
        {
			dbo = new DboScalarFunctions { Database = Database },
			xyz = new XyzScalarFunctions { Database = Database },
        };


		modelBuilder.HasDbFunction(typeof(MyDbContextScalarFunctions.dbo).GetMethod(nameof(MyDbContextScalarFunctions.dbo.GetIdsAsString), new[] { typeof(MyDbContext.TableInputTypes.dbo.IdList) })).HasSchema("dbo");
		modelBuilder.HasDbFunction(typeof(MyDbContextScalarFunctions.dbo).GetMethod(nameof(MyDbContextScalarFunctions.dbo.GetSecialSymbol), new[] { typeof(String), typeof(String) })).HasSchema("dbo");
		modelBuilder.HasDbFunction(typeof(MyDbContextScalarFunctions.dbo).GetMethod(nameof(MyDbContextScalarFunctions.dbo.GetSuperText), new[] { typeof(String) })).HasSchema("dbo");
		modelBuilder.HasDbFunction(typeof(MyDbContextScalarFunctions.xyz).GetMethod(nameof(MyDbContextScalarFunctions.xyz.GetSecialSymbol), new[] { typeof(String), typeof(String) })).HasSchema("xyz");
    }

	public class DboScalarFunctions
	{
		public DatabaseFacade Database { get; init; }

		public String GetIdsAsString(MyDbContext.TableInputTypes.dbo.IdList @ids)
		{
			var parameters = new SqlParameter[]
			{
				new SqlParameter("@ids", @ids != null ? @ids.ToRecords() : null){ SqlDbType = SqlDbType.Structured, TypeName = "dbo.IdList" },
			};
			return this.Database.SqlQueryRaw<String>("SELECT dbo.GetIdsAsString(@ids) AS [Value]", parameters).First();
		}

		public String GetSecialSymbol(String @systemNo, String @zipCode)
		{
			var parameters = new SqlParameter[]
			{
				new SqlParameter("@systemNo", @systemNo){ SqlDbType = SqlDbType.VarChar },
				new SqlParameter("@zipCode", @zipCode){ SqlDbType = SqlDbType.VarChar },
			};
			return this.Database.SqlQueryRaw<String>("SELECT dbo.GetSecialSymbol(@systemNo, @zipCode) AS [Value]", parameters).First();
		}

		public String GetSuperText(String @input)
		{
			var parameters = new SqlParameter[]
			{
				new SqlParameter("@input", @input ?? (object) DBNull.Value),
			};
			return this.Database.SqlQueryRaw<String>("SELECT dbo.GetSuperText(@input) AS [Value]", parameters).First();
		}
	}

	public class XyzScalarFunctions
	{
		public DatabaseFacade Database { get; init; }

		public String GetSecialSymbol(String @systemNo, String @zipCode)
		{
			var parameters = new SqlParameter[]
			{
				new SqlParameter("@systemNo", @systemNo){ SqlDbType = SqlDbType.VarChar },
				new SqlParameter("@zipCode", @zipCode){ SqlDbType = SqlDbType.VarChar },
			};
			return this.Database.SqlQueryRaw<String>("SELECT xyz.GetSecialSymbol(@systemNo, @zipCode) AS [Value]", parameters).First();
		}
	}


}

public static class MyDbContextScalarFunctions
{
	public static class dbo
	{
		public static String GetIdsAsString(MyDbContext.TableInputTypes.dbo.IdList @ids) => throw new NotSupportedException();
		public static String GetSecialSymbol(String @systemNo, String @zipCode) => throw new NotSupportedException();
		public static String GetSuperText(String @input) => throw new NotSupportedException();
	}
	public static class xyz
	{
		public static String GetSecialSymbol(String @systemNo, String @zipCode) => throw new NotSupportedException();
	}

}

